{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django REST - Access Policy","text":"<p>This project brings a declaritive, organized approach to managing access control in Django REST Framework projects. Each <code>ViewSet</code> or function-based view can be assigned an explicit policy for the exposed resources. No more digging through views or seralizers to understand access logic -- it's all in one place in a format that less technical stakeholders can understand. If you're familiar with other declaritive access models, such as AWS' IAM, the syntax will be familiar.</p> <p>In short, you can express access rules like this:</p> <pre><code>class ArticleAccessPolicy(AccessPolicy):\n    statements = [\n        {\n            \"action\": [\"list\", \"retrieve\"],\n            \"principal\": \"*\",\n            \"effect\": \"allow\"\n        },\n        {\n            \"action\": [\"publish\", \"unpublish\"],\n            \"principal\": [\"group:editor\"],\n            \"effect\": \"allow\"\n        }\n    ]\n</code></pre> <p>Key Features:</p> <ul> <li>A declarative JSON syntax makes access rules easy to understand, reducing the chance of accidental exposure</li> <li>The option to load access statements from an external source means non-programmers can edit access policies without redeployments</li> <li>Write plain Python methods that examine every facet of the current request (user, data, model instance) for more granular, contextual access rules</li> <li>Keep all your access logic in one place: add <code>scope_queryset</code> methods to access policy classes to apply filtering for multitenant databases</li> </ul> <p> 1.0 Breaking Change </p> <p>See migration notes if your policy statements combine multiple conditions into boolean expressions.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.6+</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install drf-access-policy\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<p>To define a policy, import <code>AccessPolicy</code> and subclass it:</p> <pre><code>from rest_framework.viewsets import ModelViewSet\nfrom rest_access_policy import AccessPolicy\n\n\nclass ArticleAccessPolicy(AccessPolicy):\n    statements = [\n        {\n            \"action\": [\"list\", \"retrieve\"],\n            \"principal\": \"*\",\n            \"effect\": \"allow\"\n        },\n        {\n            \"action\": [\"publish\", \"unpublish\"],\n            \"principal\": [\"group:editor\"],\n            \"effect\": \"allow\"\n        }\n    ]\n\n\nclass ArticleViewSet(ModelViewSet):\n    permission_classes = (ArticleAccessPolicy, )\n</code></pre> <p>You'll probably have a single access policy per view set, so a mixin is also provided to make this more explicit:</p> <pre><code>from rest_access_policy import AccessViewSetMixin\n\n\nclass ArticleViewSet(AccessViewSetMixin, ModelViewSet):\n    access_policy = ArticleAccessPolicy\n</code></pre> <p>The mixin will ensure that the access_policy is set and automatically add it to the view's <code>permission_classes</code> so that DRF's request handler evaluates it.</p> <p>Read on for a full example of how to add an access policy to a <code>ViewSet</code>.</p>"},{"location":"customization/","title":"Customizing User Group/Role Values","text":"<p>If you aren't using Django's built-in auth app, you may need to define a custom way to retrieve the role/group names to which the user belongs. Just define a method called <code>get_user_group_values</code> on your policy class. It is passed a single argument: the  user of the current request. In the example below, the user model has a to-many relationship with a \"roles\", which have their \"name\" value in a field called \"title\".</p> <pre><code>class UserAccessPolicy(AccessPolicy):\n    # ... other properties and methods ...\n\n    def get_user_group_values(self, user) -&gt; List[str]:\n        return list(user.roles.values_list(\"title\", flat=True))\n</code></pre>"},{"location":"customization/#customizing-principal-prefixes","title":"Customizing Principal Prefixes","text":"<p>By default, the prefixes to identify the type of principle (user or group) are \"id:\" and \"group:\", respectively. You can customize this by setting these properties on your policy class:</p> <pre><code>class FriendRequestPolicy(permissions.BasePermission):\n    group_prefix = \"role:\"\n    id_prefix = \"staff_id:\"\n\n    # .. the rest of you policy definition ..\n</code></pre>"},{"location":"field_level_permissions/","title":"Field-Level Permissions","text":"<p>Often, depending on the user, not all fields should be visible or only a subset should be writable.</p> <p>For these scenarios, you can define a <code>scope_fields</code> method on the access policy which is passed the <code>dict</code> of <code>name:Field</code> pairs from a serializer used with the <code>FieldAccessMixin</code>.</p>"},{"location":"field_level_permissions/#scenario-a-field-should-only-exist-for-admin-users","title":"Scenario: A field should only exist for admin users","text":"<p>Requirement: When a customer account is serialized or deserialized, the <code>email</code> field should only be present if the user is an admin.</p> <p>You could define a <code>scope_fields</code> method on the access policy like this:</p> <pre><code>class CustomerAccountAccessPolicy(AccessPolicy):\n    statements = [\n      # statements that define who is allowed to perform what action\n    ]\n\n    @classmethod\n    def scope_fields(cls, request, fields: dict, instance=None) -&gt; dict:\n        if not request.user.is_admin():\n            fields.pop('email', None)\n        return fields\n</code></pre> <p>Make sure to add the <code>FieldAccessMixin</code> to your serializer and assign it the correct access policy in its <code>Meta</code> class:</p> <pre><code>from rest_access_policy import FieldAccessMixin\n\n\nclass CustomerAccountSerializer(FieldAccessMixin, serializers.ModelSerializer):\n    class Meta:\n        model = UserAccount\n        fields = [\"username\", \"first_name\", \"last_name\", \"email\"]\n        access_policy = CustomerAccountAccessPolicy\n</code></pre>"},{"location":"field_level_permissions/#scenario-a-field-should-be-read-only-except-for-the-author","title":"Scenario: A field should be read-only, except for the author","text":"<p>Requirement: When a request is made to update an article, the <code>content</code> field should be read-only, except for the author.</p> <p>You could define a <code>scope_fields</code> method on the access policy like this:</p> <pre><code>class CustomerAccountAccessPolicy(AccessPolicy):\n    statements = [\n      # statements that define who is allowed to perform what action\n    ]\n\n    @classmethod\n    def scope_fields(cls, request, fields: dict, instance=None) -&gt; dict:\n        if instance and instance.author != request.user:\n            fields[\"content\"].read_only = True\n        return fields\n</code></pre> <p>As before, make sure to add the <code>FieldAccessMixin</code> to your serializer and assign it the correct access policy in its <code>Meta</code> class.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2019 Robert Singer</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"loading_external_source/","title":"Loading Statements from External Source","text":"<p>If you don't want your policy statements hardcoded into the classes, you can load them from an external data source: a great step because you can change access rules without redeploying code. </p> <p>Just define a method on your policy class called <code>get_policy_statements</code>, which has the following signature: <code>get_policy_statements(self, request, view) -&gt; List[dict]</code></p> <p>Example:</p> <pre><code>class UserAccessPolicy(AccessPolicy):\n    id = 'user-policy'\n\n    def get_policy_statements(self, request, view) -&gt; List[dict]:\n        statements = data_api.load_json(self.id)\n        return json.loads(statements)\n</code></pre> <p>You probably want to only define this method once on your own custom subclass of <code>AccessPolicy</code>, from which all your other access policies inherit.</p>"},{"location":"migration_notes/","title":"Migrating to 1.0","text":"<p>The 1.0 version introduced a breaking change for projects that use the <code>condition</code> element to combine multiple condition methods with boolean logic.</p> <p>Projects that use the <code>condition</code> element in this way must update affected statements to use the <code>condition_expression</code> element instead, which evaluates expressions in the same way that occurred prior to 1.0.</p> <p> No longer works</p> <pre><code>class EmailAccountAccessPolicy(AccessPolicy):\n    statements = [\n        {\n            \"principal\": \"authenticated\",\n            \"action\": \"read\",\n            \"effect\": \"allow\",\n            \"condition\": \"is_owner or is_NSA\"\n        },\n    ]\n</code></pre> <p> Change to</p> <pre><code>class EmailAccountAccessPolicy(AccessPolicy):\n    statements = [\n        {\n            \"principal\": \"authenticated\",\n            \"action\": \"read\",\n            \"effect\": \"allow\",\n            \"condition_expression\": \"is_owner or is_NSA\"\n        },\n    ]\n</code></pre>"},{"location":"multi_tenacy/","title":"Multitenancy Data / Restricting QuerySets","text":"<p>You can define a class method on your policy class that takes a <code>QuerySet</code> and the current request and returns a securely scoped <code>QuerySet</code> representing only the database rows the current user should have access to. This is helpful for multitenant situations or more generally when users should not have full visibility to model instances. You could do this elsewhere in your code, but putting this method on the policy class keeps all access logic in a single place.</p> <pre><code>    class PhotoAlbumAccessPolicy(AccessPolicy):\n        # ... statements, etc ...\n\n        # Users can only access albums they have created\n        @classmethod\n        def scope_queryset(cls, request, qs):\n            return qs.filter(creator=request.user)\n\n\n    class TodoListAccessPolicy(AccessPolicy):\n        # ... statements, etc ...\n\n        # Users can only access todo lists owned by their organization\n        @classmethod\n        def scope_queryset(cls, request, qs):\n            user_orgs = request.user.organizations.all()\n            return qs.filter(org__id__in=user_orgs)\n</code></pre> <p>You have to remember to call <code>scope_queryset</code> method from the view, so I'd suggest reviewing this as part of a security audit checklist.</p> <pre><code>    class PhotoAlbumViewSet(ModelViewSet):\n    # ...\n\n        # Ensure that current user only access albums created by himself\n        def get_queryset(self):\n            return self.access_policy.scope_queryset(\n                self.request, PhotoAlbum.objects.all()\n            )\n</code></pre>"},{"location":"object_level_permissions/","title":"Object-Level Permissions/Custom Conditions","text":"<p>What about object-level permissions? You can easily check object-level access in a custom condition that's evaluated to determine whether the statement takes effect. This condition is passed the <code>view</code> instance, so you can get the model instance with a call to <code>view.get_object()</code>. You can even reference multiple conditions, to keep your access methods focused and testable, as well as parametrize these conditions with arguments.</p> <pre><code>class AccountAccessPolicy(AccessPolicy):\n    statements = [\n        ## ... other statements ...\n        {\n            \"action\": [\"withdraw\"],\n            \"principal\": [\"*\"],\n            \"effect\": \"allow\",\n            \"condition\": [\"balance_is_positive\", \"user_must_be:owner\"]\n        },\n        {\n            \"action\": [\"upgrade_to_gold_status\"],\n            \"principal\": [\"*\"],\n            \"effect\": \"allow\",\n\"condition\": [\"user_must_be:account_advisor\"]\n}\n        ## ... other statements ...\n    ]\n\n    def balance_is_positive(self, request, view, action) -&gt; bool:\n        account = view.get_object()\n        return account.balance &gt; 0\n\n    def user_must_be(self, request, view, action, field: str) -&gt; bool:\n        account = view.get_object()\nreturn getattr(account, field) == request.user\n</code></pre> <p>Notice how we're re-using the <code>user_must_be</code> method by parameterizing it with the model field that should be equal for the user of the request: the statement will only be effective if this condition passes.</p> <p>If you have multiple custom methods defined on the policy, you can construct boolean expressions to combine them. The syntax is the same as Python's boolean expressions.</p> <p>Note that the <code>condition_expression</code> element is used instead of <code>condition</code>.</p> <pre><code>class AccountAccessPolicy(AccessPolicy):\n    statements = [\n        {\n            \"action\": [\"freeze\"],\n            \"principal\": [\"*\"],\n            \"effect\": \"allow\",\n            \"condition_expression\": [\"(is_request_from_account_owner or is_FBI_request)\"]\n        },\n    ]\n\n    def is_FBI_request(self, request, view, action) -&gt; bool:\n        return is_request_from_fbi(request)\n\n    def is_request_from_account_owner(self, request, view, action) -&gt; bool:\n        return account.owner == request.user\n</code></pre>"},{"location":"policy_logic/","title":"Policy Evaluation Logic","text":"<p>To determine whether access to a request is granted, two steps are applied: (1) filtering statements, to find out which statements apply to the request (2) denying or allowing the request based on those statements.</p> <ol> <li>Filtering statements: A statement is applicable to the current request if all of the following are true (a) the request user matches one of the statement's principals, (b) the name of the method/function matches one of its actions, and (c) all custom conditions evaluate to true.</li> <li>Allow or deny: The request is allowed if any of the statements have an effect of \"allow\", and none have an effect of \"deny\". By default, all requests are denied. Requests are implicitly denied if no <code>Allow</code> statements are found, and they are explicitly denied if any <code>Deny</code> statements are found. <code>Deny</code> statements trump <code>Allow</code> statements.</li> </ol>"},{"location":"policy_logic/#example","title":"Example","text":"<p>Consider the following access policy and <code>ViewSet</code>.</p> <pre><code>class ArticleAccessPolicy(AccessPolicy):\n    statements = [\n        {\n            \"action\": [\"list\", \"retrieve\"],\n            \"principal\": \"*\",\n            \"effect\": \"allow\"\n        },\n        {\n            \"action\": [\"publish\"],\n            \"principal\": [\"group:editor\"],\n            \"effect\": \"allow\"            \n        }\n    ]\n\n\nclass ArticleViewSet(ModelViewSet):\n    permission_classes = (ArticleAccessPolicy, )\n\n    @action(method=\"POST\")\n    def publish(self, request, *args, **kwargs):\n        pass\n</code></pre> <p>A user in the group <code>sales</code> is allowed to <code>list</code> and <code>retrieve</code> articles because of the first statement. They cannot <code>publish</code> because all access is implicitly denied, however users in the group <code>editor</code> can <code>publish</code> due to the second statement.</p>"},{"location":"policy_reuse/","title":"Access Policy Re-Use","text":"<p>If you've defined a <code>scope_queryset</code> method, you'll likely want to use it in multiple places. If an object shouldn't be returned to a user from a view set, they probably shouldn't be able to reference that object's <code>id</code> when sending a <code>POST</code> or <code>PUT</code> request.</p> <p>A <code>PermittedPkRelatedField</code> or <code>PermittedSlugRelatedField</code> can be passed an access policy class.</p> <pre><code>from django.contrib.auth.models import User\n\nfrom rest_framework import serializers\nfrom rest_access_policy import PermittedPkRelatedField\nfrom my_policies import UserAccessPolicy\n\nclass AccountUpdateSerializer(serializers.ModelSerializesr):\n    emergency_contact = PermittedPkRelatedField(\n        access_policy=UserAccessPolicy, queryset=User.objects.all()\n    )\n</code></pre> <pre><code>from django.contrib.auth.models import User\n\nfrom rest_framework import serializers\nfrom rest_access_policy import PermittedSlugRelatedField\nfrom my_policies import UserAccessPolicy\n\nclass AccountUpdateSerializer(serializers.ModelSerializesr):\n    emergency_contact = PermittedSlugRelatedField(\n        access_policy=UserAccessPolicy, queryset=User.objects.all(), slug_field=\"username\"\n    )\n</code></pre> <p>Ensure that when the serializer is instantiated, it gets passed the <code>request</code> object, which gets passed to the policy's <code>scope_queryset</code> behind the scenes.</p>"},{"location":"reusable_conditions/","title":"Re-Usable Conditions/Permissions","text":"<p>If you'd like to re-use custom conditions across policies, you can define them globally in a module and point to it via the setttings. You can also provide a <code>List</code> of paths to check multiple files.</p> <pre><code># in your project settings.py\n\nDRF_ACCESS_POLICY = {\"reusable_conditions\": [\"myproject.global_access_conditions\"]}\n</code></pre> <pre><code># in myproject.global_access_conditions.py\n\ndef is_the_weather_nice(request, view, action: str) -&gt; bool:\n    data = weather_api.load_today()\n    return data[\"temperature\"] &gt; 68\n\ndef user_must_be(self, request, view, action, field: str) -&gt; bool:\n    account = view.get_object()\n    return getattr(account, field) == request.user\n</code></pre> <p>The policy class will first check its own methods for what's been defined in the <code>condition</code> property. If nothing is found, it will check the module defined in the <code>reusable_conditions</code> setting.</p>"},{"location":"statement_dataclasses/","title":"Statement Dataclass","text":"<p>A <code>Statement</code> dataclass can be used instead of dictionaries to define policy statements.</p> <p>For example, the following policies are equivalent:</p> <pre><code>from rest_access_policy import Statement\n\n\nclass ArticleAccessPolicy(AccessPolicy):\n    statements = [\n        Statement(\n            action=\"destroy\", \n            principal=[\"*\"], \n            effect=\"allow\", \n            condition=\"is_author\"\n        )\n    ] \n\n    def is_author(self, request, view, action) -&gt; bool:\n        article = view.get_object()\n        return request.user == article.author\n\n\n\nclass ArticleAccessPolicy(AccessPolicy):\n    statements = [\n        {\n            \"action\": [\"destroy\"],\n            \"principal\": [\"*\"],\n            \"effect\": \"allow\",\n            \"condition\": \"is_author\"\n        }\n    ]\n\n    def is_author(self, request, view, action) -&gt; bool:\n        article = view.get_object()\n        return request.user == article.author\n</code></pre>"},{"location":"statement_elements/","title":"Statement Elements","text":"<p>JSON policies are made up of elements that together determine who can do what with your application and under what conditions.</p>"},{"location":"statement_elements/#principal","title":"principal","text":"Description              Should match the user of the current request by identifying a group they belong to or their user ID.          Special Values <ul> <li> <code>\"*\"</code> (any user)                 </li> <li> <code>\"admin\"</code> (any admin user)                 </li> <li> <code>\"staff\"</code> (any staff user)                 </li> <li> <code>\"authenticated\"</code> (any authenticated user)                 </li> <li> <code>\"anonymous\"</code> (any non-authenticated user)                 </li> </ul> Type <code>Union[str, List[str]]</code> Formats <ul> <li>                    Match by group with <code>\"group:{name}\"</code> </li> <li>                    Match by ID with <code>\"id:{id}\" </code> </li> </ul> Examples <ul> <li> <code>[\"group:admins\", \"id:9322\"]</code> </li> <li> <code>[\"id:5352\"]</code> </li> <li> <code>[\"anonymous\"]</code> </li> <li> <code>\"*\"</code> </li> </ul>"},{"location":"statement_elements/#action","title":"action","text":"Description           The action or actions that the statement applies to. The value should match the name of a view set method or the name of the view function.  Alternatively, you can use placeholders to match the current request's HTTP method.          Type <code>Union[str, List[str]]</code> Special Values <ul> <li> <code>\"*\"</code> (any action)                 </li> <li> <code>\"&lt;safe_methods&gt;\"</code> (a read-only HTTP request: HEAD, GET, OPTIONS)                 </li> <li> <code>\"&lt;method:get|head|options|delete|put|patch|post&gt;\"</code> (match a specific HTTP method)                 </li> </ul> Examples <ul> <li> <code>[\"list\", \"destroy\", \"create]</code> </li> <li> <code>[\"*\"]</code> </li> <li> <code>[\"&lt;safe_methods&gt;\"]</code> </li> <li> <code>[\"&lt;method:post&gt;\"]</code> </li> </ul>"},{"location":"statement_elements/#effect","title":"effect","text":"Description          Whether the statement, if it is in effect, should allow or deny access. All access is denied by default, so use <code>deny</code> when you'd like to override an <code>allow</code> statement that will also be in effect.          Type <code>str</code> Values <ul> <li> <code>\"allow\"</code> </li> <li> <code>\"deny\"</code> </li> </ul>"},{"location":"statement_elements/#condition","title":"condition","text":"Description          The name of a method on the policy that returns a boolean. If you want to pass a custom argument to the condition's method, format the value as <code>{method_name}:{value}</code>, e.g. <code>user_must_be:owner</code> will call a method named <code>user_must_be</code>, passing it the string <code>\"owner\"</code> as the final argument.                   The method signature is <code>condition(request, view, action: str, custom_arg: str=None)</code>. If it returns <code>True</code>, the statement will be in effect.                    Useful for enforcing object-level permissions. If list of conditions is given, all conditions must evaluate to <code>True</code>.          Type <code>Union[str, List[str]]</code> Examples <ul> <li> <code>\"is_manager_of_account\"</code> </li> <li> <code>\"is_author_of_post\"</code> </li> <li> <code>[\"balance_is_positive\", \"account_is_not_frozen\"]`</code> </li> <li> <code>\"user_must_be:account_manager\"</code> </li> </ul>"},{"location":"statement_elements/#condition_expression","title":"condition_expression","text":"Description          Same as the <code>condition</code> element, but with added support for evaluating boolean combinations of policy methods. The expressions follow Python's boolean syntax.                   The method signature is <code>condition(request, view, action: str, custom_arg: str=None)</code>. If it returns <code>True</code>, the statement will be in effect.          Type <code>Union[str, List[str]]</code> Examples <ul> <li> <code>[\"(is_request_from_account_owner or is_FBI_request)\"]</code> </li> <li> <code>\"is_sunny and is_weekend\"</code> </li> <li> <code>\"is_tasty and not is_expensive\"</code> </li> </ul>"},{"location":"view_set_mixin/","title":"ViewSet Mixin","text":"<p>Most likely, you'll only have one access policy per <code>ViewSet</code>, to keep all the logic in one place for each resource. Django REST Framework allows setting multiple permission classes, which can make <code>ViewSet</code> code less clear. For clarity, a mixin is provided that allows you define to an <code>access_policy</code> class attribute. The mixin will add the policy class to the view's <code>permission_classes</code> to ensure DRF's request handler evaluates it.</p> <pre><code>from my_app_policies import ArticleAccessPolicy\nfrom rest_access_policy import AccessViewSetMixin\n\n\nclass ArticleViewSet(AccessViewSetMixin, ModelViewSet):\n    access_policy = ArticleAccessPolicy\n\n    def get_queryset(self):\n        return self.access_policy.scope_queryset(\n            self.request, Articles.objects.all()\n        )\n</code></pre>"},{"location":"usage/function_based_view_usage/","title":"Policy for Function-Based View","text":"<p>You can also use policies with function-based views. The action to reference in your policy statements is the name of the function. You can also bundle multiple functions into the same policy as the example below shows.</p> <pre><code>class AuditLogsAccessPolicy(AccessPolicy):\n    statements = [\n        {\n\"action\": [\"search_logs\"],\n\"principal\": \"group:it_staff\",\n            \"effect\": \"allow\"\n        },\n        {\n\"action\": [\"download_logs\"],\n\"principal\": [\"group:it_admin\"],\n            \"effect\": \"allow\"            \n        }\n    ]\n\n\n@api_view([\"GET\"])\n@permission_classes((AuditLogsAccessPolicy,))\ndef search_logs(request):\n## your logic here...\n    pass\n\n\n@api_view([\"GET\"])\n@permission_classes((AuditLogsAccessPolicy,))\ndef download_logs(request):\n## your logic here...\n    pass\n</code></pre>"},{"location":"usage/view_set_usage/","title":"Policy for ViewSet","text":"<p>A policy is comprised of \"statements\" that declare what \"actions\" a \"principal\" can or cannot perform on the resource, with optional custom checks that can examine any detail of the current request.</p> <p>Two key points to remember going forward:</p> <ul> <li>all access is implicitly denied by default</li> <li>any statement with the \"deny\" effect overrides any and all \"allow\" statement</li> </ul> <p>Let's look at the policy below, which is for an articles endpoint exposed through a <code>ViewSet</code>.</p> <pre><code>class ArticleAccessPolicy(AccessPolicy):\n    statements = [\n        {\n            \"action\": [\"list\", \"retrieve\"],\n            \"principal\": \"*\",\n            \"effect\": \"allow\"\n        },\n        {\n\"action\": [\"publish\", \"unpublish\"],\n\"principal\": [\"group:editor\"],\n            \"effect\": \"allow\"\n        },\n        {\n            \"action\": [\"destroy\"],\n            \"principal\": [\"*\"],\n            \"effect\": \"allow\",\n            \"condition\": \"is_author\"\n        },\n        {\n            \"action\": [\"*\"],\n            \"principal\": [\"*\"],\n            \"effect\": \"deny\",\n            \"condition\": \"is_happy_hour\"\n        }\n    ]\n\n    def is_author(self, request, view, action) -&gt; bool:\n        article = view.get_object()\n        return request.user == article.author\n\n    def is_happy_hour(self, request, view, action) -&gt; bool:\n        now = datetime.datetime.now()\n        return now.hour &gt;= 17 and now.hour &lt;= 18:\n\n    @classmethod\n    def scope_queryset(cls, request, queryset):\n        if request.user.groups.filter(name='editor').exists():\n            return queryset\n\n        return queryset.filter(status='published')\n</code></pre> <p>The actions correspond to the names of methods on the ViewSet and the following rules are put in place:</p> <ul> <li>anyone is allowed to list and retrieve articles</li> <li>users in the editor group are allowed to publish and unpublish articles</li> <li>in order to destroy an article, the user must be the author of the article. Notice how the condition method <code>is_author</code> calls <code>get_object()</code> on the view to get the current article.</li> <li>if the condition <code>is_happy_hour</code>, evaluates to <code>True</code>, then no one is allowed to do anything.</li> </ul> <p>Additionally, we have some logic in the <code>scope_queryset</code> method for filtering which models are visible to the current user. Here, we want users to only see published articles, unless they are an editor, in which case they can see articles with any status. You have to remember to call this method from the view, so I'd suggest reviewing this as part of a security audit checklist.</p> <p>Below is a <code>ViewSet</code> with the policy attached. Notice how the <code>publish</code> and <code>unpublish</code> methods correspond to the <code>action</code> declarations in the policy.</p> <pre><code>class ArticleViewSet(AccessViewSetMixin, ModelViewSet):\n    access_policy = ArticleAccessPolicy\n\n    # If you prefer not to use the mixin, the policy class can be added to permission_classes\n    # permission_classes = (ArticleAccessPolicy,)\n\n    # Helper property here to make get_queryset logic\n    # more explicit\n    @property\n    def access_policy(self):\n        return self.permission_classes[0]\n\n    # Ensure that current user can only see the models\n    # they are allowed to see\n    def get_queryset(self):\n        return self.access_policy.scope_queryset(\n            self.request, Articles.objects.all()\n        )\n\n    @action(methods=['POST'], detail=False)\ndef publish(self, request, *args, **kwargs):\npass\n\n    @action(methods=['POST'], detail=False)\ndef unpublish(self, request, *args, **kwargs):\npass\n\n    # the rest of you view set definition...\n</code></pre>"}]}